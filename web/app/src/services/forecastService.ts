import { RawForecastAPIResponse, normalizeForecast, NormalizedForecast } from "../../types/forecast";

// MOCK baseado no formato literal fornecido pela API (mantendo séries como number[] e sem model_info)
const MOCK: RawForecastAPIResponse = {
    data: {
        forecast: {
            humidity: {
                interval_90: [0.007585647588806304, 0.01422764170163263],
                predicted: 0.010939818653970765,
                series: [
                    0.010939818653970765, 0.0110058999311529, 0.011034208861207633, 0.011032180271461614, 0.011033847674904406,
                    0.011068241593422873, 0.011123865232603187, 0.011146628156803045, 0.011078526237836499, 0.010904828603347494,
                    0.010667603825506501, 0.010433734186328092, 0.010247337364411838, 0.010109513959093134, 0.010000392102155701,
                    0.009917295241698288, 0.009888705957383524, 0.009949620013235403, 0.010103390290431875, 0.01030890817273353,
                    0.01050684474744076, 0.01066034074017076, 0.010772295903392968, 0.01086583395443957
                ]
            },
            rain: {
                interval_90: [-0.0001649641526509916, 0.0001627389722874974],
                predicted: 2.8486726133005015e-06,
                series: [
                    2.8486726133005015e-06, 2.9879603834242792e-06, 2.8076957640397925e-06, 1.590440865730635e-06,
                    -2.6905220075742303e-07, -1.4684796479818058e-06, -8.90210629618421e-07, 1.4228170947195527e-06,
                    4.310156190602925e-06, 6.493800673533414e-06, 7.583628765697983e-06, 8.177792298926594e-06,
                    9.05386351463965e-06, 1.0312476283395644e-05, 1.1319123620568483e-05, 1.1441833586597854e-05,
                    1.0774808472735657e-05, 1.0079725111713347e-05, 1.0004959738306932e-05, 1.0400950276456315e-05,
                    1.0459533154887178e-05, 9.557081293755061e-06, 7.942249983674763e-06, 6.542589371382121e-06
                ]
            },
            temperature: {
                interval_90: [19.720393222386253, 27.575892601814186],
                predicted: 23.736379745860933,
                series: [
                    23.736379745860933, 23.035002425513206, 22.521714594363317, 22.025234797163503, 21.35686714932914,
                    20.584428590641828, 20.116080112245932, 20.457148271246115, 21.811689130479394, 23.87168583468524,
                    25.992803024077993, 27.619263963818202, 28.603385304231757, 29.169858482794698, 29.599191071353303,
                    29.942560383723276, 30.01667547198942, 29.64056917180759, 28.852382750981118, 27.892186473926348,
                    26.989593597847332, 26.188038523318717, 25.38071106301628, 24.49808642228357
                ]
            },
            water_vapor: {
                interval_90: [14.320295954195409, 41.18383936196858],
                predicted: 27.484362727485596,
                series: [
                    27.484362727485596, 27.35494556316173, 27.228222324861147, 27.106203089439827, 26.99385191923326,
                    26.901229385449078, 26.841486571909517, 26.825156324481917, 26.8549012820315, 26.925269977614978,
                    27.028054118308102, 27.158759361053036, 27.31823206530605, 27.50736687465155, 27.718906468857114,
                    27.933288399003995, 28.12261011490485, 28.260518748513174, 28.331514740789878, 28.33417897323972,
                    28.27778942920948, 28.176140818419956, 28.042787199000685, 27.889077123765137
                ]
            },
            wind_speed: {
                interval_90: [3.7607915948175914, 25.517905444496144],
                predicted: 14.68542577414751,
                series: [
                    14.68542577414751, 14.59770200432388, 14.851788598646888, 15.095213318891762, 15.033493686853992,
                    14.710844857783416, 14.462613834163077, 14.582979767290869, 15.016877483457755, 15.36229974163809,
                    15.182909403842771, 14.353371851136991, 13.146546587613132, 12.01966988079335, 11.318204783141441,
                    11.147762564161724, 11.461450167345797, 12.19570037078433, 13.27862779939381, 14.522186564686695,
                    15.576574651365673, 16.08065542312974, 15.923232123863594, 15.369516280099363
                ]
            }
        },
        location: { lat: -16.34, lon: -46.88 },
        timestamp: "2024-05-01 00:00:00"
    }
};

export async function fetchForecast(lat: number, lon: number, datetime: string): Promise<NormalizedForecast> {
    const base = process.env.FORECAST_API_BASE_URL;
    console.log("Using FORECAST_API_BASE_URL:", base);
    if (!base) return normalizeForecast(MOCK);

    try {
        const url = new URL("/forecast", base);
        url.searchParams.set("lat", String(lat));
        url.searchParams.set("lon", String(lon));
        url.searchParams.set("datetime", datetime);

        const res = await fetch(url.toString(), { cache: "no-store" });
        if (!res.ok) throw new Error(`Falha ao buscar previsão (${res.status})`);
        const json: unknown = await res.json();
        // Tentativa de validar shape básico
        if (!json || typeof json !== 'object' || !('data' in json)) {
            throw new Error('Formato inesperado da resposta');
        }
        return normalizeForecast(json as RawForecastAPIResponse);
        } catch {
        // Fallback para mock
        return normalizeForecast(MOCK);
    }
}